{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport { createFilter } from 'rollup-pluginutils';\nimport posthtml from 'posthtml';\nimport matchHelper from 'posthtml-match-helper';\n\n\nconst pluginName = 'posthtml-multi';\n\n\nexport default function({\n\twatch = false,\n\timportPath,\n\toptions: optionList = [{}],\n}) {\n\tconst output = {};\n\tlet options = Array.isArray(optionList)\n\t\t? optionList\n\t\t: [optionList];\n\n\tfor (let config of options) {\n\t\tconfig._filter = config.include\n\t\t\t? createFilter(config.include, config.exclude)\n\t\t\t: createFilter('**/*.html', config.exclude);\n\t}\n\n\n\tconst plugin = {\n\t\tname: pluginName,\n\n\t\tasync resolveImport(filePath, from) {\n\t\t\t// eslint-disable-next-line multiline-ternary\n\t\t\tconst parent = from ? from : filePath;\n\t\t\tif (path.isAbsolute(filePath) && await fs.pathExists(filePath)) return filePath;\n\t\t\tif (importPath) {\n\t\t\t\tconst fromImportPath = path.join(path.resolve(importPath), filePath);\n\t\t\t\tif (await fs.pathExists(fromImportPath)) return fromImportPath;\n\t\t\t}\n\t\t\tconst fromCWD = path.resolve(filePath);\n\t\t\tconst fromEntry = path.join(path.resolve(path.dirname(parent)), filePath);\n\t\t\tif (await fs.pathExists(fromCWD)) return fromCWD;\n\t\t\telse if (await fs.pathExists(fromEntry)) return fromEntry;\n\t\t\treturn null;\n\t\t},\n\n\t\tposthtmlHook(from, context) {\n\t\t\treturn (tree) => new Promise((resolve) => {\n\t\t\t\tconst promises = [];\n\t\t\t\ttree.match(matchHelper('module[href],include[src],extends[src]'), (node) => {\n\t\t\t\t\tpromises.push(new Promise((resolveTask) => {\n\t\t\t\t\t\tconst href = node.attrs.href\n\t\t\t\t\t\t\t? node.attrs.href\n\t\t\t\t\t\t\t: node.attrs.src;\n\t\t\t\t\t\tthis.resolveImport(href, from).then((nodePath) => {\n\t\t\t\t\t\t\tif (nodePath !== null) {\n\t\t\t\t\t\t\t\tcontext.addWatchFile(nodePath);\n\t\t\t\t\t\t\t\tfs.readFile(nodePath).then((code) => {\n\t\t\t\t\t\t\t\t\tposthtml([this.posthtmlHook(nodePath, context)])\n\t\t\t\t\t\t\t\t\t\t.process(code)\n\t\t\t\t\t\t\t\t\t\t.then(() => resolveTask())\n\t\t\t\t\t\t\t\t\t\t.catch((err) => context.error(err));\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.catch((err) => context.error(err));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch((err) => context.error(err));\n\t\t\t\t\t}));\n\t\t\t\t});\n\t\t\t\tPromise.all(promises).then(() => resolve(tree))\n\t\t\t\t\t.catch((err) => context.error(err));\n\t\t\t});\n\t\t},\n\n\t\tasync transform(code, id) {\n\t\t\tconst matchingConfigs = [];\n\t\t\tconst parsedList = [];\n\n\t\t\tfor (let config of options) {\n\t\t\t\tif (config._filter(id)) {\n\t\t\t\t\tmatchingConfigs.push(config);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!matchingConfigs.length) return null;\n\n\t\t\tfor (let config of matchingConfigs) {\n\t\t\t\tconst parsed = (await posthtml(config.plugins || []).process(code, {\n\t\t\t\t\tparser: config.parser,\n\t\t\t\t\tdirectives: config.directives,\n\t\t\t\t})).html;\n\t\t\t\tparsedList.push(parsed);\n\t\t\t\tif (config.extract) {\n\t\t\t\t\tif (!Array.isArray(output[id])) output[id] = [];\n\t\t\t\t\toutput[id].push({\n\t\t\t\t\t\tcode: parsed,\n\t\t\t\t\t\textract: config.extract,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (watch) {\n\t\t\t\t\tawait posthtml([plugin.posthtmlHook(id, this)]).process(code, {\n\t\t\t\t\t\tparser: config.parser,\n\t\t\t\t\t\tdirectives: config.directives,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tcode: matchingConfigs.some((config) => config.extract)\n\t\t\t\t\t? ''\n\t\t\t\t\t: `export default ${JSON.stringify(parsedList[0])}`,\n\t\t\t\tmap: { mappings: '' },\n\t\t\t};\n\t\t},\n\n\t\tasync generateBundle(opts, bundle, isWrite) {\n\t\t\tif (!isWrite) return;\n\n\t\t\tconst getFileName = (file, extract) => {\n\t\t\t\tconst resolvePath = (dir, segment) => path.resolve(path.join(dir, segment));\n\t\t\t\tconst dir = opts.dir || path.dirname(opts.file);\n\t\t\t\tif (typeof extract === 'string') {\n\t\t\t\t\tif (path.isAbsolute(extract)) {\n\t\t\t\t\t\tif (path.extname(extract)) return extract;\n\t\t\t\t\t\treturn `${extract}.html`;\n\t\t\t\t\t}\n\t\t\t\t\tif (path.extname(extract)) return resolvePath(dir, extract);\n\t\t\t\t\treturn resolvePath(dir, `${extract}.html`);\n\t\t\t\t}\n\t\t\t\tconst source = path.basename(file, path.extname(file));\n\t\t\t\treturn resolvePath(dir, `${source}.html`);\n\t\t\t};\n\n\t\t\tfor (let [id, codeList] of Object.entries(output)) {\n\t\t\t\tfor (let i = 0; i < codeList.length; i++) {\n\t\t\t\t\tlet assetName = getFileName(id, codeList[i].extract, i);\n\t\t\t\t\tlet codeFile = {\n\t\t\t\t\t\tfileName: assetName,\n\t\t\t\t\t\tisAsset: true,\n\t\t\t\t\t\tsource: codeList[i].code,\n\t\t\t\t\t};\n\t\t\t\t\tbundle[assetName] = codeFile;\n\t\t\t\t}\n\t\t\t\tdelete output[id];\n\t\t\t}\n\t\t}\n\t};\n\treturn plugin;\n}\n"],"names":["pluginName","ref","const","output","options","Array","isArray","optionList","let","config","_filter","include","createFilter","exclude","plugin","name","resolveImport","filePath","from","parent","path","isAbsolute","fs","pathExists","importPath","fromImportPath","join","resolve","fromCWD","fromEntry","dirname","posthtmlHook","context","tree","Promise","promises","match","matchHelper","node","push","resolveTask","href","attrs","src","this","then","nodePath","addWatchFile","readFile","code","posthtml","process","catch","err","error","all","transform","id","matchingConfigs","parsedList","length","parsed","plugins","parser","directives","html","extract","watch","some","JSON","stringify","map","mappings","generateBundle","opts","bundle","isWrite","file","resolvePath","dir","Object","entries","i","codeList","assetName","segment","extname","basename","codeFile","fileName","isAsset","source"],"mappings":"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"}